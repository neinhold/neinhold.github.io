{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","serverUrl","replayUrl","App","props","state","curlink","stats","replayInfo","chatLogs","chatLog","axios","get","then","response","url","data","setState","getJsonl","array","reverse","path","jsonArray","parseJsonl","sort","sortByProperty","includes","ms","totalSeconds","Math","floor","hours","minutes","property","a","b","player","i","auth","className","lastname","totalmatchcount","totalwincount","toFixed","totallosscount","totalscorecount","totalassistcount","this","msToString","totalplaytime","id","window","open","file","name","substring","length","href","target","exact","rel","map","renderChatLog","renderPlayerStats","replay","renderReplayInfo","component","match","params","location","padWithZeros","React","Component","IdHandler","isNaN","replayTitle","message","chatString","dateString","Date","parseInt","timeStamp","toLocaleString","type","getReplayInfo","renderMessage","jsonl","lineArray","split","slice","json","JSON","parse","push","num","s","substr","containerName","sToString","duration","stadium","modifiers","renderModifiers","scorered","scoreblue","redplayers","blueplayers","withRouter","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.fcd21739.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Switch, Route, Link, withRouter, useParams, useRouteMatch } from \"react-router-dom\";\n\n\nvar serverUrl = 'https://lively-scene-db1a.neinhold.workers.dev/?http://85.159.209.166.nip.io/';\nvar replayUrl = 'http://www.haxball.com/replay?v=3#http://85.159.209.166/replays/';\nvar replaySourceUrl = 'http://85.159.209.166/replays/';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      curlink: \"\",\n      stats: [],\n      replayInfo: [],\n      chatLogs: [],\n      chatLog: [],\n    }\n\n    axios.get(serverUrl + \"data/url.txt\")\n    .then(response => {\n      let url = response.data;\n      this.state.curlink = url;\n      //FORCE UPDATE STATE\n      this.setState({curlink: this.state.curlink})\n    });\n\n    this.getJsonl(\"data/stats\");\n    this.getJsonl(\"data/replayInfo\");\n\n    axios.get(serverUrl + \"chatlogs/\")\n    .then(response => {\n      let array = response.data;\n      array.reverse();\n      this.state.chatLogs = array;\n      //FORCE UPDATE STATE\n      this.setState({curlink: this.state.curlink})\n    });\n\n\n\n  }\n\n  getJsonl(path){\n    let url = serverUrl + path + \".jsonl\";\n    axios.get(url)\n    .then(response => {\n      let jsonArray = [response.data];\n      if(typeof response.data === 'string'){\n        jsonArray = parseJsonl(response.data);\n      }\n      if(path == \"data/stats\"){\n        jsonArray.sort(this.sortByProperty(\"totalmatchcount\"));\n        this.state.stats = jsonArray;\n      }\n      if(path == \"data/replayInfo\"){\n        jsonArray.sort(this.sortByProperty(\"id\"));\n        this.state.replayInfo = jsonArray;\n      }\n      if(path.includes(\"chatlogs/\")){\n        this.state.chatLog = jsonArray;\n      }\n      //FORCE UPDATE STATE\n      this.setState({curlink: this.state.curlink})\n    });\n  }\n\n\n\n  msToString(ms){\n    var totalSeconds =  Math.floor(ms / 1000);\n    var hours = Math.floor(totalSeconds / 3600);\n    var minutes = Math.floor((totalSeconds - (hours*3600)) / 60);\n    var seconds = totalSeconds - (hours*3600) - (minutes * 60);\n    var timeString = hours + \"h\" + minutes + \"m\" + seconds + \"s\";\n    return timeString;\n  }\n\n\n  sortByProperty(property){\n     return function(a,b){\n        if(a[property] < b[property])\n           return 1;\n        else if(a[property] > b[property])\n           return -1;\n\n        return 0;\n     }\n  }\n\n\n  renderPlayerStats(player,i){\n    if(player.auth == \"HOST_AUTH\"){\n      return(<div/>);\n    }\n    return(\n      <div className=\"Container\">\n\n        <div className=\"InfoTitle\">\n        {player.lastname}\n        </div>\n        <div className=\"InfoPlainTitle\">\n        Games played\n        </div>\n        <div className=\"BigDigit\">\n        {player.totalmatchcount}\n        </div>\n        <div className=\"PlayerStatsGames\">\n          <div className=\"InfoBox\">\n            <div className=\"InfoPlainTitle\">\n            Wins\n            </div>\n            <div className=\"SmallDigit\">\n            {player.totalwincount}\n            </div>\n            <hr/>\n            <div className=\"SmallDigitSmall\">\n            {(Math.floor((player.totalwincount/player.totalmatchcount).toFixed(2) * 100) || 0) + \"%\"}\n            </div>\n            <div className=\"SubTitle\">\n            won\n            </div>\n          </div>\n          <div className=\"InfoBox\">\n            <div className=\"InfoPlainTitle\">\n            Losses\n            </div>\n            <div className=\"SmallDigit\">\n            {player.totallosscount}\n            </div>\n            <hr/>\n            <div className=\"SmallDigitSmall\">\n            {(Math.floor((player.totallosscount/player.totalmatchcount).toFixed(2) * 100) || 0) + \"%\"}\n            </div>\n            <div className=\"SubTitle\">\n            lost\n            </div>\n          </div>\n          <div className=\"InfoBox\">\n            <div className=\"InfoPlainTitle\">\n            Goals\n            </div>\n            <div className=\"SmallDigit\">\n            {player.totalscorecount}\n            </div>\n            <hr/>\n            <div className=\"SmallDigitSmall\">\n            {(player.totalscorecount / player.totalmatchcount || 0).toFixed(2)}\n            </div>\n            <div className=\"SubTitle\">\n            per game\n            </div>\n          </div>\n          <div className=\"InfoBox\">\n            <div className=\"InfoPlainTitle\">\n            Assists\n            </div>\n            <div className=\"SmallDigit\">\n            {player.totalassistcount}\n            </div>\n            <hr/>\n            <div className=\"SmallDigitSmall\">\n            {(player.totalassistcount / player.totalmatchcount || 0).toFixed(2)}\n            </div>\n            <div className=\"SubTitle\">\n            per game\n            </div>\n          </div>\n          <div className=\"InfoPlainTitle\">\n          Total time played\n          </div>\n          <div className=\"SmallDigit\">\n          {this.msToString(player.totalplaytime)}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  goToReplay(id){\n    let url = replayUrl + id + \".hbr2\";\n    window.open(url, \"_blank\");\n  }\n\n\n\n\n\n  renderChatLog(file,i){\n    let name = file.substring(0,file.length - 6);\n    return(\n      <a href={name} target=\"_blank\">\n      <div className=\"Container Click\">\n        <div className=\"SmallDigitSmall\">\n        {name}\n        </div>\n      </div>\n      </a>\n    )\n  }\n\n  render(){\n\n\n    return (\n      <div>\n      <Switch>\n        <Route exact path={'/'}>\n          <div className=\"App\">\n\n\n\n            <header className=\"Header\">\n              <p className=\"Title\">/hax/</p>\n\n              <a\n                className=\"RoomLink\"\n                href={this.state.curlink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <div className=\"LinkContainer\">\n                  {this.state.curlink}\n                </div>\n              </a>\n            </header>\n            <div className=\"Row\">\n              <div className=\"Column Chatlog\">\n                <div className=\"ColumnTitle\">\n                Chatlogs\n                </div>\n                {this.state.chatLogs.map((file, i) => this.renderChatLog(file, i))}\n              </div>\n              <div className=\"Column Stats\">\n                <div className=\"ColumnTitle\">\n                Stats\n                </div>\n                {this.state.stats.map((player, i) => this.renderPlayerStats(player, i))}\n              </div>\n              <div className=\"Column Replays\">\n                <div className=\"ColumnTitle\">\n                Replays\n                </div>\n                {this.state.replayInfo.map((replay, i) => renderReplayInfo(replay, i))}\n\n              </div>\n            </div>\n\n          </div>\n\n        </Route>\n        <Route exact path='/:id' component={(props) => <IdHandler id={props.match.params} replayInfo={this.state.replayInfo}/>\n             /*window.location = replayUrl  + this.padWithZeros(props.match.params.id) + \".hbr2\";\n             return null;*/\n        }/>\n        <Route path='/d/:id' component={(props) => {\n             window.location = replaySourceUrl  + padWithZeros(props.match.params.id) + \".hbr2\";\n             return null;\n        }}/>\n\n      </Switch>\n\n      </div>\n    );\n\n  }\n}\n\n\n\nexport class IdHandler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      chatLog: [],\n      replayInfo: []\n    }\n\n    let id = props.id.id;\n    let replayInfo = props.replayInfo;\n    this.state.replayInfo = replayInfo;\n\n    if(!isNaN(id)){\n      let replayTitle = padWithZeros(id);\n      window.location = replayUrl  + replayTitle + \".hbr2\";\n    }\n    else{\n      let url = serverUrl + \"chatlogs/\" + id + \".jsonl\";\n      axios.get(url)\n      .then(response => {\n        let jsonArray = [response.data];\n        if(typeof response.data === 'string'){\n          jsonArray = parseJsonl(response.data);\n        }\n        this.state.chatLog = jsonArray;\n        this.setState({chatLog: this.state.chatLog});\n\n      });\n    }\n\n  }\n\n\n\n  getReplayInfo(id){\n    if(this.state.replayInfo){\n      for(var i = 0; i < this.state.replayInfo.length; i++){\n        let curId = this.state.replayInfo[i].id;\n        if(id == curId){\n          return this.state.replayInfo[i];\n        }\n      }\n    }\n  }\n\n  renderMessage(message){\n\n    let chatString = \"\";\n    let className = \"ChatMessage\";\n    let date = new Date(parseInt(message.timeStamp));\n    let dateString = date.toLocaleString();\n    if(message.type == 0){\n      chatString += message.name + \": \";\n    }\n    if(message.type == 1){\n      className = \"ChatMessageHost\";\n    }\n    if(message.type == 2){\n      className = \"ChatAnnouncement\";\n    }\n    if(message.type == 3){\n      className = \"ChatReplay\"\n      chatString = \"Replay Match #\" + parseInt(message.id,10);\n      let replayInfo = this.getReplayInfo(message.id);\n      return(\n        <div>\n          <div className=\"ChatTimeStamp\">\n            {dateString}\n          </div>\n          <div className={className}>\n            {chatString}\n            {(replayInfo) ? renderReplayInfo(replayInfo, -1) : <div/>}\n          </div>\n        </div>\n\n      )\n    }\n    else{\n\n      chatString += message.message;\n\n      return(\n        <div>\n          <div className=\"ChatTimeStamp\">\n            {dateString}\n          </div>\n          <div className={className}>\n            {chatString}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  render(){\n\n    return (\n      <div className=\"ChatContainer\">\n        {this.state.chatLog.map((message, i) => this.renderMessage(message, i))}\n      </div>\n    );\n\n  }\n}\n\nexport function  parseJsonl(jsonl){\n    let rawLines = jsonl;\n    let lineArray = rawLines.split('\\n');\n    lineArray = lineArray.slice(0, lineArray.length-1);\n\n    let jsonArray = [];\n    for(var i = 0; i < lineArray.length; i++){\n      let json = JSON.parse(lineArray[i]);\n      jsonArray.push(json);\n    }\n    return jsonArray;\n  }\n\n  export function sToString(s){\n    var totalSeconds =  s;\n    var minutes = Math.floor(totalSeconds / 60);\n    var seconds = totalSeconds - (minutes * 60);\n    var timeString = minutes + \"m\" + parseInt(seconds) + \"s\";\n    return timeString;\n  }\n\n  export function padWithZeros(num) {\n    var s = \"000000000\" + num;\n    return s.substr(s.length-8);\n  }\n\n  export function renderModifiers(replay){\n      if(replay.modifiers != \"No modifiers active\"){\n        return(\n          <div className=\"SubTitle\">\n          {replay.modifiers}\n          </div>\n        )\n      }\n  }\n\n  export function renderReplayInfo(replay,i){\n    let containerName = \"Container\";\n    if(i == -1){\n      containerName = \"ContainerChat\";\n    }\n    return(\n      <a href={replayUrl + replay.id + \".hbr2\"} target=\"_blank\">\n      <div  className={containerName + \" Click\"}>\n\n        <div className=\"SmallDigitSmall\">\n        {parseInt(replay.id,10)}\n        </div>\n        <div className=\"InfoPlainTitle\">\n        {sToString(replay.duration)}\n        </div>\n        <div className=\"SubTitleOffset\">\n        {replay.stadium}\n        </div>\n        {renderModifiers(replay)}\n        <div className=\"PlayerStatsGames\">\n          <div className=\"InfoBoxWide\">\n            <div className=\"InfoPlainTitle\">\n            Red\n            </div>\n            <div className=\"SmallDigit\">\n            {replay.scorered}\n            </div>\n            <hr/>\n          </div>\n          <div className=\"InfoBoxWide\">\n            <div className=\"InfoPlainTitle\">\n            Blue\n            </div>\n            <div className=\"SmallDigit\">\n            {replay.scoreblue}\n            </div>\n            <hr/>\n          </div>\n          <div className=\"PlayerStatsGames\">\n            <div className=\"InfoBoxWide\">\n              <div className=\"SubTitle\">\n              {replay.redplayers.map(function(player, i){\n                return <div className=\"SubTitleOffset\">\n                {player}\n                </div>\n              })}\n              </div>\n            </div>\n            <div className=\"InfoBoxWide\">\n              <div className=\"SubTitle\">\n              {replay.blueplayers.map(function(player, i){\n                return <div className=\"SubTitleOffset\">\n                {player}\n                </div>\n              })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      </a>\n\n    )\n  }\n\n  export default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n     <App />\n   </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}